kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  resourceVersion: "764793995"
  name: db
  uid: ae7859ae-7a8d-449f-8ead-9cec9742bc12
  creationTimestamp: "2023-05-23T08:42:16Z"
  generation: 2
  managedFields:
    - manager: openshift-controller-manager
      operation: Update
      apiVersion: apps.openshift.io/v1
      time: "2023-05-23T08:42:16Z"
      fieldsType: FieldsV1
      fieldsV1:
        "f:metadata":
          "f:annotations":
            .: {}
            "f:template.alpha.openshift.io/wait-for-ready": {}
          "f:labels":
            .: {}
            "f:template": {}
            "f:template.openshift.io/template-instance-owner": {}
        "f:spec":
          "f:replicas": {}
          "f:selector":
            .: {}
            "f:name": {}
          "f:strategy":
            "f:activeDeadlineSeconds": {}
            "f:recreateParams":
              .: {}
              "f:timeoutSeconds": {}
            "f:type": {}
          "f:template":
            .: {}
            "f:metadata":
              .: {}
              "f:creationTimestamp": {}
              "f:labels":
                .: {}
                "f:name": {}
            "f:spec":
              .: {}
              "f:containers":
                .: {}
                'k:{"name":"postgresql"}':
                  "f:image": {}
                  "f:volumeMounts":
                    .: {}
                    'k:{"mountPath":"/var/lib/pgsql/data"}':
                      .: {}
                      "f:mountPath": {}
                      "f:name": {}
                  "f:terminationMessagePolicy": {}
                  .: {}
                  "f:resources":
                    .: {}
                    "f:limits":
                      .: {}
                      "f:memory": {}
                  "f:livenessProbe":
                    .: {}
                    "f:exec":
                      .: {}
                      "f:command": {}
                    "f:failureThreshold": {}
                    "f:initialDelaySeconds": {}
                    "f:periodSeconds": {}
                    "f:successThreshold": {}
                    "f:timeoutSeconds": {}
                  "f:env":
                    .: {}
                    'k:{"name":"POSTGRESQL_DATABASE"}':
                      .: {}
                      "f:name": {}
                      "f:valueFrom":
                        .: {}
                        "f:secretKeyRef": {}
                    'k:{"name":"POSTGRESQL_PASSWORD"}':
                      .: {}
                      "f:name": {}
                      "f:valueFrom":
                        .: {}
                        "f:secretKeyRef": {}
                    'k:{"name":"POSTGRESQL_USER"}':
                      .: {}
                      "f:name": {}
                      "f:valueFrom":
                        .: {}
                        "f:secretKeyRef": {}
                  "f:readinessProbe":
                    .: {}
                    "f:exec":
                      .: {}
                      "f:command": {}
                    "f:failureThreshold": {}
                    "f:initialDelaySeconds": {}
                    "f:periodSeconds": {}
                    "f:successThreshold": {}
                    "f:timeoutSeconds": {}
                  "f:securityContext":
                    .: {}
                    "f:capabilities": {}
                    "f:privileged": {}
                  "f:terminationMessagePath": {}
                  "f:imagePullPolicy": {}
                  "f:ports":
                    .: {}
                    'k:{"containerPort":5432,"protocol":"TCP"}':
                      .: {}
                      "f:containerPort": {}
                      "f:protocol": {}
                  "f:name": {}
              "f:dnsPolicy": {}
              "f:restartPolicy": {}
              "f:schedulerName": {}
              "f:securityContext": {}
              "f:terminationGracePeriodSeconds": {}
              "f:volumes":
                .: {}
                'k:{"name":"postgresql-data"}':
                  .: {}
                  "f:name": {}
                  "f:persistentVolumeClaim":
                    .: {}
                    "f:claimName": {}
          "f:triggers": {}
    - manager: openshift-controller-manager
      operation: Update
      apiVersion: apps.openshift.io/v1
      time: "2023-05-23T08:42:37Z"
      fieldsType: FieldsV1
      fieldsV1:
        "f:status":
          "f:updatedReplicas": {}
          "f:readyReplicas": {}
          "f:conditions":
            .: {}
            'k:{"type":"Available"}':
              .: {}
              "f:lastTransitionTime": {}
              "f:lastUpdateTime": {}
              "f:message": {}
              "f:status": {}
              "f:type": {}
            'k:{"type":"Progressing"}':
              .: {}
              "f:lastTransitionTime": {}
              "f:lastUpdateTime": {}
              "f:message": {}
              "f:reason": {}
              "f:status": {}
              "f:type": {}
          "f:details":
            .: {}
            "f:causes": {}
            "f:message": {}
          "f:replicas": {}
          "f:availableReplicas": {}
          "f:observedGeneration": {}
          "f:unavailableReplicas": {}
          "f:latestVersion": {}
      subresource: status
  namespace: yannvd-dev
  labels:
    template: postgresql-persistent-template
    template.openshift.io/template-instance-owner: cf58d2ab-a9e3-47a1-9ec8-221931670f0c
spec:
  strategy:
    type: Recreate
    recreateParams:
      timeoutSeconds: 600
    resources: {}
    activeDeadlineSeconds: 21600
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          namespace: openshift
          name: "postgresql:10-el8"
        lastTriggeredImage: >-
          image-registry.openshift-image-registry.svc:5000/openshift/postgresql@sha256:f98ee90210167538a919250e6cee6fc2105744b9adfd986034cd0a3056d1b209
    - type: ConfigChange
  replicas: 1
  revisionHistoryLimit: 10
  test: false
  selector:
    name: postgresql
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: postgresql
    spec:
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql
      containers:
        - resources:
            limits:
              memory: 512Mi
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: postgresql
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - "--live"
            initialDelaySeconds: 120
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: POSTGRESQL_USER
              value: postgres
            - name: POSTGRESQL_PASSWORD
              value: postgres
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: database-name
          securityContext:
            capabilities: {}
            privileged: false
          ports:
            - containerPort: 5432
              protocol: TCP
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/pgsql/data
          terminationMessagePolicy: File
          image: >-
            image-registry.openshift-image-registry.svc:5000/openshift/postgresql@sha256:f98ee90210167538a919250e6cee6fc2105744b9adfd986034cd0a3056d1b209
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
status:
  observedGeneration: 2
  details:
    message: config change
    causes:
      - type: ConfigChange
  availableReplicas: 1
  unavailableReplicas: 0
  latestVersion: 1
  updatedReplicas: 1
  conditions:
    - type: Available
      status: "True"
      lastUpdateTime: "2023-05-23T08:42:34Z"
      lastTransitionTime: "2023-05-23T08:42:34Z"
      message: Deployment config has minimum availability.
    - type: Progressing
      status: "True"
      lastUpdateTime: "2023-05-23T08:42:37Z"
      lastTransitionTime: "2023-05-23T08:42:17Z"
      reason: NewReplicationControllerAvailable
      message: replication controller "postgresql-1" successfully rolled out
  replicas: 1
  readyReplicas: 1

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - image: redis:alpine
          name: redis
          ports:
            - containerPort: 6379
              name: redis
          volumeMounts:
            - mountPath: /data
              name: redis-data
      volumes:
        - name: redis-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
spec:
  type: ClusterIP
  ports:
    - name: "redis-service"
      port: 6379
      targetPort: 6379
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: worker
  name: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
        - image: spywash/devops:worker
          name: worker
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vote
  name: vote
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vote
  template:
    metadata:
      labels:
        app: vote
    spec:
      containers:
        - image: spywash/devops:vote
          name: vote
          ports:
            - containerPort: 80
              name: vote
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vote
  name: vote
spec:
  type: NodePort
  ports:
    - name: "vote-service"
      port: 5000
      targetPort: 80
      nodePort: 32000
  selector:
    app: vote
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: result
  name: result
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result
  template:
    metadata:
      labels:
        app: result
    spec:
      containers:
        - image: spywash/devops:result
          name: result
          ports:
            - containerPort: 80
              name: result
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: result
  name: result
spec:
  type: NodePort
  ports:
    - name: "result-service"
      port: 5001
      targetPort: 80
      nodePort: 32001
  selector:
    app: result
